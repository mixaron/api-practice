basePath: /api
definitions:
  dto.ErrorBaseResponse:
    properties:
      message:
        example: Error message
        type: string
      status:
        example: error
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: example@gmail.com
        type: string
      password:
        example: password213
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.ProfileResponse:
    properties:
      email:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: example@gmail.com
        type: string
      password:
        example: password213
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.SuccessProfileBaseResponse:
    properties:
      data:
        $ref: '#/definitions/dto.ProfileResponse'
      message:
        example: Success message
        type: string
      status:
        example: success
        type: string
    type: object
  dto.SuccessRegisterBaseResponse:
    properties:
      message:
        example: Success message
        type: string
      status:
        example: success
        type: string
    type: object
  dto.TokenBaseResponse:
    properties:
      data:
        $ref: '#/definitions/dto.TokenResponse'
      message:
        example: Authenticated
        type: string
      status:
        example: success
        type: string
    type: object
  dto.TokenResponse:
    properties:
      token:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: API для авторизации по jwt, созданию статей, использования websocket
  title: Rest API для тестового задания
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Аутентифицирует пользователя и возвращает JWT токен
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      summary: Authenticate user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя
      parameters:
      - description: User registration info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessRegisterBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      summary: Register a new user
      tags:
      - auth
  /profile:
    get:
      description: Получить профиль текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessProfileBaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - profile
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
