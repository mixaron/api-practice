basePath: /api
definitions:
  dto.ArticleBaseResponse:
    properties:
      attachments:
        items:
          $ref: '#/definitions/dto.AttachmentBaseResponse'
        type: array
      author_id:
        example: 1
        type: integer
      content:
        example: content example
        type: string
      created_at:
        example: "2025-05-31T10:30:00Z"
        type: string
      is_published:
        example: true
        type: boolean
      preview_url:
        example: https://example.com/images/article1.jpg
        type: string
      title:
        example: title example
        type: string
    type: object
  dto.ArticleRequest:
    properties:
      attachments:
        items:
          $ref: '#/definitions/dto.AttachmentRequest'
        type: array
      content:
        type: string
      previewURL:
        type: string
      title:
        type: string
    type: object
  dto.AttachmentBaseResponse:
    properties:
      file_name:
        example: document.pdf
        type: string
      file_size:
        example: 1024
        type: integer
      url:
        example: https://example.com/files/document.pdf
        type: string
    type: object
  dto.AttachmentRequest:
    properties:
      fileName:
        type: string
      url:
        type: string
    type: object
  dto.ErrorBaseResponse:
    properties:
      message:
        example: Error message
        type: string
      status:
        example: error
        type: string
    type: object
  dto.LoginRequest:
    properties:
      email:
        example: example@gmail.com
        type: string
      password:
        example: password213
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.ProfileResponse:
    properties:
      email:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        example: example@gmail.com
        type: string
      password:
        example: password213
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  dto.SuccessBaseResponse:
    properties:
      message:
        example: Success message
        type: string
      status:
        example: success
        type: string
    type: object
  dto.SuccessProfileBaseResponse:
    properties:
      data:
        $ref: '#/definitions/dto.ProfileResponse'
      message:
        example: Success message
        type: string
      status:
        example: success
        type: string
    type: object
  dto.TokenBaseResponse:
    properties:
      data:
        $ref: '#/definitions/dto.TokenResponse'
      message:
        example: Authenticated
        type: string
      status:
        example: success
        type: string
    type: object
  dto.TokenResponse:
    properties:
      token:
        type: string
    type: object
  dto.VerifyRequest:
    properties:
      code:
        type: string
      email:
        type: string
    type: object
host: localhost:3000
info:
  contact: {}
  description: API для авторизации по jwt, созданию статей, использования wsocket
  title: Rest API для тестового задания
  version: "1.0"
paths:
  /api/articles:
    get:
      description: find and return all users articles
      produces:
      - application/json
      responses:
        "200":
          description: Article published successfully
          schema:
            $ref: '#/definitions/dto.ArticleBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      summary: Get all articles
      tags:
      - article
    post:
      consumes:
      - multipart/form-data
      description: Create Article by auth user. post http method
      parameters:
      - description: article create data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Article published successfully
          schema:
            $ref: '#/definitions/dto.ArticleBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Create Article post
      tags:
      - article
  /api/articles/{id}:
    delete:
      description: User deletes his own article by ID. Requires authentication.
      parameters:
      - description: Article ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Article deleted successfully
          schema:
            $ref: '#/definitions/dto.SuccessBaseResponse'
        "403":
          description: Article does not belong to user
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "404":
          description: Article not found
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete article
      tags:
      - article
  /api/articles/id:
    patch:
      description: user publish his own article
      parameters:
      - description: Article ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Article published successfully
          schema:
            $ref: '#/definitions/dto.SuccessBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Publish article
      tags:
      - article
    put:
      consumes:
      - multipart/form-data
      description: user update his own article
      parameters:
      - description: article update data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.ArticleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Article updated successfully
          schema:
            $ref: '#/definitions/dto.ArticleBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Update article
      tags:
      - article
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: auth user and return jwt
      parameters:
      - description: User login credentials
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.TokenBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      summary: Authenticate user
      tags:
      - auth
  /api/auth/reg:
    post:
      consumes:
      - application/json
      description: Registers new user and sends verification code
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      summary: Register new user
      tags:
      - auth
  /api/auth/verify:
    post:
      consumes:
      - application/json
      description: Verifies user's email with received code
      parameters:
      - description: User registration data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.SuccessBaseResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      summary: Verify user registration
      tags:
      - auth
  /profile:
    get:
      description: get current user profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.SuccessProfileBaseResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ErrorBaseResponse'
      security:
      - ApiKeyAuth: []
      summary: Get user profile
      tags:
      - profile
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
